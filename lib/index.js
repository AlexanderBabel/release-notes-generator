const SemanticReleaseError = require('@semantic-release/error');
const conventionalChangelog = require('conventional-changelog-core');
const conventionalChangelogAngular = require('conventional-changelog-angular');

/**
 * @callback releaseNotesGeneratorCallback
 * @param {Error} error error object
 * @param {string} changelog changelog generated by the plugin
 */

/**
 * Generate the changelog for all the commits since the last release.
 * 
 * @param {Object} pluginConfig semantic-release configuration
 * @param {Object} pluginConfig.preset conventional-changelog preset ('angular', 'atom', 'codemirror', 'ember', 'eslint', 'express', 'jquery', 'jscs', 'jshint')
 * @param {Object} pluginConfig.config requierable npm package with a custom conventional-changelog preset
 * @param {Object} options semantic-release options
 * @param {releaseNotesGeneratorCallback} callback The callback that handles the release note generation.
 */
module.exports = (pluginConfig, options, callback) => {
  const cb = typeof options === 'function' ? options : callback;
  let content = '';

  if (pluginConfig.preset) {
    try {
      pluginConfig.config = require(`conventional-changelog-${pluginConfig.preset.toLowerCase()}`);
    } catch (err) {
      cb(new SemanticReleaseError(`Preset: "${pluginConfig.preset}" does not exist: ${err.message}`, err.code));
    }
  } else if (pluginConfig.config) {
    try {
      pluginConfig.config = require(pluginConfig.config);
    } catch (err) {
      cb(new SemanticReleaseError(`Config: "${pluginConfig.config}" does not exist: ${err.message}`, err.code));
    }
  } else {
    pluginConfig.config = conventionalChangelogAngular;
  }

  conventionalChangelog(pluginConfig)
    .on('error', err => {
      cb(new SemanticReleaseError(`Error in conventional-changelog: ${err.message}`, err.code));
    })
    .on('data', buffer => {
      content += buffer.toString();
    })
    .on('end', () => {
      cb(null, content.trim());
    });
};
